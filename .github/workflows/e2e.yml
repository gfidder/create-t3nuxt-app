# this workflow will run on every pr to make sure the project is following the guidelines

# after labeler, run other actions with strict permissions
name: E2E Tests

on:
  pull_request:
    branches:
      - "*"
    paths:
      - "cli/**/*"

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  build-t3-app:
    runs-on: ubuntu-latest
    # if: |
    #   contains(github.event.pull_request.labels.*.name, 'ðŸ“Œ area: cli') ||
    #   contains(github.event.pull_request.labels.*.name, 'ðŸ“Œ area: t3-app')
    strategy:
      matrix:
        # trpc: ["true", "false"]
        # tailwind: ["true", "false"]
        # nextAuth: ["true", "false"]
        # prisma: ["true", "false"]
        trpc: ["false"]
        tailwind: ["false"]
        nextAuth: ["false"]
        prisma: ["false"]

    name: "Build and Start T3 App ${{ matrix.trpc }}-${{ matrix.tailwind }}-${{ matrix.nextAuth }}-${{ matrix.prisma }}"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2.2.4
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install

      - run: pnpm turbo --filter=create-t3nuxt-app build
      # has to be scaffolded outside the CLI project so that no lint/tsconfig are leaking
      # through. this way it ensures that it is the app's configs that are being used
      # FIXME: this is a bit hacky, would rather have --packages=trpc,tailwind,... but not sure how to setup the matrix for that
      - run: cd cli && pnpm start ../../ci-${{ matrix.trpc }}-${{ matrix.tailwind }}-${{ matrix.nextAuth }}-${{ matrix.prisma }} --noGit --CI --trpc=${{ matrix.trpc }} --tailwind=${{ matrix.tailwind }} --nextAuth=${{ matrix.nextAuth }} --prisma=${{ matrix.prisma }}
      - run: cd ../ci-${{ matrix.trpc }}-${{ matrix.tailwind }}-${{ matrix.nextAuth }}-${{ matrix.prisma }} && pnpm build
        env:
          NEXTAUTH_SECRET: foo
